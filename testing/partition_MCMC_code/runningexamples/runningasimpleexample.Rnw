\documentclass[a4paper]{article}
\usepackage{a4wide}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{color}
%\usepackage{natbib}

\newcommand{\nn}{\noindent}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
# set global chunk options
opts_chunk$set(comment="",tidy=TRUE, message=FALSE, echo=TRUE,cache=FALSE, fig.path='figure/minimal-', fig.align='center', fig.show='hold',fig.width=5,fig.height=2.5)
#tidy.opts=list(keep.blank.line=FALSE)
#options(replace.assign=TRUE, width.cutoff=60)
options(tidy=TRUE,width=62)
#dep_prev()
@

\section*{Running a simple MCMC example \hfill \normalsize{\textnormal{Jack Kuipers, \today}}}

\nn For this example we will assume that the score of any DAG is simply proportional to its number of edges.  The size of the DAGs is also restricted to $n=3$

<<>>=
n<-3
@

\nn First we load the \texttt{R} files needed to run the MCMC codes
<<>>=
source('../edgerevandstructure/structurefns.R')
source('../edgerevandstructure/structureMCMC.R')
source('../edgerevandstructure/newedgerevfns.R')
source('../edgerevandstructure/newedgerevmove.R')
source('../orderandpartition/orderMCMC.R')
source('../orderandpartition/orderfns.R')
source('../orderandpartition/partitionMCMC.R')
source('../orderandpartition/partitionmoves.R')
source('../orderandpartition/partitionfns.R')
source('../orderandpartition/samplefns.R')
source('../scoring/combinations.R')
source('../scoring/scorefns.R')
source('../scoring/scoretables.R')
# load a simple score proportional to the number of edges in the DAG
source('../scoring/numedgescore.R')
@

\nn Then we build the score table of all parent sets

<<>>=
maxparents<-2 # Maximum number of parents to allow
# Fill up a matrix with possible parents
parenttable<-listpossibleparents(maxparents,c(1:n))
tablelength<-nrow(parenttable[[1]]) # size of the table
# Now need to score them!
scoretable<-scorepossibleparents(parenttable,n) 
@

\nn and fix the number of iterations for the various MCMC schemes, recording the outcome at each step

<<>>=
iterations<-100 # number of iterations in the chain
stepsave<-1 # how often to record the DAG
@

\nn We will also perform all the runs with the same seed

<<>>=
seednumber<-101 # seed number
@

\section{Structure MCMC}

For structure MCMC we include standard edge reversal by setting

<<>>=
revallowed<-1 # allow standard edge reversals
@    
    
\nn and exclude the new edge reversal move by giving the \texttt{moveprobs} vector a single element

<<>>=
moveprobs<-c(1) # having length 1 disallows the new edge reversal move
@

\nn Starting with a DAG with no edges

<<>>=
startDAG<-matrix(numeric(n*n),nrow=n) # starting DAG is empty say
@

\nn we can then run structure MCMC as follows

<<>>=
set.seed(seednumber) # set the seed
example<-structureMCMC(n,startDAG,iterations,stepsave,maxparents,parenttable,scoretable,revallowed,moveprobs) # run the MCMC code
@

\nn The result of the function is a list containing the sampled DAGs (stored as incidence matrices) as the first element and their scores as the second.  We can extract the scores and an example of the DAG with the highest score, represented as its incidence matrix

<<>>=
DAGscores<-unlist(example[[2]])
maxscore<-max(DAGscores)
maxDAG<-example[[1]][which(DAGscores==maxscore)][[1]]
maxDAG
@

\nn The trace plot of the run instead is

<<>>=
par(mar=c(2.5,5.75,0.5,0.75)) # plotting parameters

nparts<-length(example[[2]])
plot(1:nparts,DAGscores,type="l", ylab="DAG score", xlab="",main="", col="blue",ylim=c(maxscore-3.2,maxscore+0.2))
abline(h=maxscore,col='springgreen4', lwd=3) # the maximal score line
lines(1:nparts,DAGscores,type="l", col="blue")
@

\section{New edge reversal move}

We can include the new edge reversal move, by simply making the vector \texttt{moveprobs} have two elements, with the second corresponding to the probability of picking the new edge reversal move.

<<>>=
moveprobs<-c(0.93,0.07) # having length 1 disallows the new edge reversal move
set.seed(seednumber) # set the seed
example<-structureMCMC(n,startDAG,iterations,stepsave,maxparents,parenttable,scoretable,revallowed,moveprobs) # run the MCMC code
@

\nn The trace plot is now

<<>>=
par(mar=c(2.5,5.75,0.5,0.75)) # plotting parameters

DAGscores<-unlist(example[[2]])
maxscore<-max(DAGscores)
nparts<-length(example[[2]])
plot(1:nparts,DAGscores,type="l", ylab="DAG score", xlab="",main="", col="blue",ylim=c(maxscore-3.2,maxscore+0.2))
abline(h=maxscore,col='springgreen4', lwd=3) # the maximal score line
lines(1:nparts,DAGscores,type="l", col="blue")
@

\section{Order MCMC}

\nn For Order MCMC we now have three elements in the \texttt{moveprobs} vector.  The first is the probability of swapping any two elements in the order, the second the probability of only swapping adjacent nodes and the last the probability to stay still (to enforce aperiodicity of the chain)

<<>>=
moveprobs<-c(0.99,0,0.01)
@

\nn We also need to choose a starting order, for example the identity permutation

<<>>=
startorder<-c(1:n) # starting order
@

\nn and then we can run the MCMC code

<<>>=
set.seed(seednumber) # set the seed
example<-orderMCMC(n,startorder,iterations,stepsave,parenttable,scoretable,moveprobs)
@

\nn The output now contains four components, a sampled DAG and its score along with the score of the entire order and the sampled order itself (stored as a permutation vector).  We can again plot the outcome

<<>>=
par(mar=c(2.5,5.75,0.5,0.75)) # plotting parameters

DAGscores<-unlist(example[[2]])
maxscore<-max(DAGscores)
nparts<-length(example[[2]])
plot(1:nparts,DAGscores,type="l", ylab="DAG score", xlab="",main="", col="blue",ylim=c(maxscore-3.2,maxscore+0.2))
abline(h=maxscore,col='springgreen4', lwd=3) # the maximal score line
lines(1:nparts,DAGscores,type="l", col="blue")
@

\section{Partition MCMC}

\nn For Partiton MCMC we have five elements in the \texttt{moveprobs} vector.  The first is the probability of swapping two nodes from different partititon elements, while the second for swapping nodes from adjacent partition elements.  The third corresponds to joining and splitting partition elements with the fourth being the probability of moving a node from one element to another.  The last is again the probability of not moving

<<>>=
moveprobs<-c(0.4,0,0,0.59,0.01)
@

\nn For the starting partition we can choose the DAG with no edges

<<>>=
startpermutation<-c(1:n) # pick a starting permutation
startpartition<-c(n) # and a starting partition - c(n) gives the empty DAG
@

\nn and then run the MCMC code

<<>>=
set.seed(seednumber) # set the seed
example<-partitionMCMC(n,startpermutation,startpartition,iterations,stepsave,parenttable,scoretable,moveprobs)
@

\nn The output now contains a five components: a sampled DAG and its score, the score of the entire partition and the sampled permutation and partition.  The trace plot is

<<>>=
par(mar=c(2.5,5.75,0.5,0.75)) # plotting parameters

DAGscores<-unlist(example[[2]])
maxscore<-max(DAGscores)
nparts<-length(example[[2]])
plot(1:nparts,DAGscores,type="l", ylab="DAG score", xlab="",main="", col="blue",ylim=c(maxscore-3.2,maxscore+0.2))
abline(h=maxscore,col='springgreen4', lwd=3) # the maximal score line
lines(1:nparts,DAGscores,type="l", col="blue")
@

\section{Partition MCMC with edge reversal}

\nn Finally we can include the new edge reversal move on an underlying Partition MCMC chain by including a sixth element in the \texttt{moveprobs} vector, corresponding to the probability of picking the edge reversal move

<<>>=
moveprobs<-c(0.37,0,0,0.55,0.01,0.07)
set.seed(seednumber) # set the seed
example<-partitionMCMC(n,startpermutation,startpartition,iterations,stepsave,parenttable,scoretable,moveprobs)
@

\nn with trace plot

<<>>=
par(mar=c(2.5,5.75,0.5,0.75)) # plotting parameters

DAGscores<-unlist(example[[2]])
maxscore<-max(DAGscores)
nparts<-length(example[[2]])
plot(1:nparts,DAGscores,type="l", ylab="DAG score", xlab="",main="", col="blue",ylim=c(maxscore-3.2,maxscore+0.2))
abline(h=maxscore,col='springgreen4', lwd=3) # the maximal score line
lines(1:nparts,DAGscores,type="l", col="blue")
@

\end{document}